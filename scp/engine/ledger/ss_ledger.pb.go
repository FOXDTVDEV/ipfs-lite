// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ss_ledger.proto

package ss_ledger

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SSLedger struct {
	Partner              string   `protobuf:"bytes,1,opt,name=partner,proto3" json:"partner,omitempty"`
	LastMpExchange       int64    `protobuf:"varint,2,opt,name=last_mp_exchange,json=lastMpExchange,proto3" json:"last_mp_exchange,omitempty"`
	MpExchangeCount      uint64   `protobuf:"varint,3,opt,name=mp_exchange_count,json=mpExchangeCount,proto3" json:"mp_exchange_count,omitempty"`
	Whitelisted          bool     `protobuf:"varint,4,opt,name=whitelisted,proto3" json:"whitelisted,omitempty"`
	LastWhitelistCheck   int64    `protobuf:"varint,5,opt,name=last_whitelist_check,json=lastWhitelistCheck,proto3" json:"last_whitelist_check,omitempty"`
	Invoice              float64  `protobuf:"fixed64,6,opt,name=invoice,proto3" json:"invoice,omitempty"`
	BytesPaid            uint64   `protobuf:"varint,7,opt,name=bytes_paid,json=bytesPaid,proto3" json:"bytes_paid,omitempty"`
	BytesPayRecvd        uint64   `protobuf:"varint,8,opt,name=bytes_pay_recvd,json=bytesPayRecvd,proto3" json:"bytes_pay_recvd,omitempty"`
	Sent                 float64  `protobuf:"fixed64,9,opt,name=sent,proto3" json:"sent,omitempty"`
	Recvd                float64  `protobuf:"fixed64,10,opt,name=recvd,proto3" json:"recvd,omitempty"`
	Role                 string   `protobuf:"bytes,11,opt,name=role,proto3" json:"role,omitempty"`
	SignedMp             string   `protobuf:"bytes,12,opt,name=signed_mp,json=signedMp,proto3" json:"signed_mp,omitempty"`
	DeviceId             string   `protobuf:"bytes,13,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	BytesSent            uint64   `protobuf:"varint,14,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesRecvd           uint64   `protobuf:"varint,15,opt,name=bytes_recvd,json=bytesRecvd,proto3" json:"bytes_recvd,omitempty"`
	BlocksSent           uint64   `protobuf:"varint,16,opt,name=blocks_sent,json=blocksSent,proto3" json:"blocks_sent,omitempty"`
	BlocksRecvd          uint64   `protobuf:"varint,17,opt,name=blocks_recvd,json=blocksRecvd,proto3" json:"blocks_recvd,omitempty"`
	Metadata             []byte   `protobuf:"bytes,18,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSLedger) Reset()         { *m = SSLedger{} }
func (m *SSLedger) String() string { return proto.CompactTextString(m) }
func (*SSLedger) ProtoMessage()    {}
func (*SSLedger) Descriptor() ([]byte, []int) {
	return fileDescriptor_805989fe1ce77e15, []int{0}
}

func (m *SSLedger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSLedger.Unmarshal(m, b)
}
func (m *SSLedger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSLedger.Marshal(b, m, deterministic)
}
func (m *SSLedger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSLedger.Merge(m, src)
}
func (m *SSLedger) XXX_Size() int {
	return xxx_messageInfo_SSLedger.Size(m)
}
func (m *SSLedger) XXX_DiscardUnknown() {
	xxx_messageInfo_SSLedger.DiscardUnknown(m)
}

var xxx_messageInfo_SSLedger proto.InternalMessageInfo

func (m *SSLedger) GetPartner() string {
	if m != nil {
		return m.Partner
	}
	return ""
}

func (m *SSLedger) GetLastMpExchange() int64 {
	if m != nil {
		return m.LastMpExchange
	}
	return 0
}

func (m *SSLedger) GetMpExchangeCount() uint64 {
	if m != nil {
		return m.MpExchangeCount
	}
	return 0
}

func (m *SSLedger) GetWhitelisted() bool {
	if m != nil {
		return m.Whitelisted
	}
	return false
}

func (m *SSLedger) GetLastWhitelistCheck() int64 {
	if m != nil {
		return m.LastWhitelistCheck
	}
	return 0
}

func (m *SSLedger) GetInvoice() float64 {
	if m != nil {
		return m.Invoice
	}
	return 0
}

func (m *SSLedger) GetBytesPaid() uint64 {
	if m != nil {
		return m.BytesPaid
	}
	return 0
}

func (m *SSLedger) GetBytesPayRecvd() uint64 {
	if m != nil {
		return m.BytesPayRecvd
	}
	return 0
}

func (m *SSLedger) GetSent() float64 {
	if m != nil {
		return m.Sent
	}
	return 0
}

func (m *SSLedger) GetRecvd() float64 {
	if m != nil {
		return m.Recvd
	}
	return 0
}

func (m *SSLedger) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *SSLedger) GetSignedMp() string {
	if m != nil {
		return m.SignedMp
	}
	return ""
}

func (m *SSLedger) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *SSLedger) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *SSLedger) GetBytesRecvd() uint64 {
	if m != nil {
		return m.BytesRecvd
	}
	return 0
}

func (m *SSLedger) GetBlocksSent() uint64 {
	if m != nil {
		return m.BlocksSent
	}
	return 0
}

func (m *SSLedger) GetBlocksRecvd() uint64 {
	if m != nil {
		return m.BlocksRecvd
	}
	return 0
}

func (m *SSLedger) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*SSLedger)(nil), "ss_ledger.SSLedger")
}

func init() {
	proto.RegisterFile("ss_ledger.proto", fileDescriptor_805989fe1ce77e15)
}

var fileDescriptor_805989fe1ce77e15 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xcd, 0xae, 0xd3, 0x30,
	0x10, 0x85, 0x65, 0x6e, 0x6e, 0x9b, 0x4c, 0x7f, 0xd2, 0x5a, 0x5d, 0x58, 0x20, 0x44, 0x60, 0x81,
	0x22, 0x16, 0x08, 0x89, 0x47, 0xa8, 0x58, 0x20, 0x51, 0x09, 0xa5, 0x0b, 0x96, 0x96, 0x6b, 0x8f,
	0x5a, 0xab, 0xf9, 0x53, 0x62, 0x0a, 0x7d, 0x42, 0x5e, 0x0b, 0x79, 0x9c, 0xe4, 0x76, 0xe7, 0xf9,
	0xce, 0x99, 0x33, 0xa7, 0x55, 0x20, 0xed, 0x7b, 0x59, 0xa2, 0x39, 0x63, 0xf7, 0xb9, 0xed, 0x1a,
	0xd7, 0xf0, 0x64, 0x02, 0x1f, 0xfe, 0x45, 0x10, 0x1f, 0x8f, 0x3f, 0x68, 0xe0, 0x02, 0xe6, 0xad,
	0xea, 0x5c, 0x8d, 0x9d, 0x60, 0x19, 0xcb, 0x93, 0x62, 0x1c, 0x79, 0x0e, 0x9b, 0x52, 0xf5, 0x4e,
	0x56, 0xad, 0xc4, 0xbf, 0xfa, 0xa2, 0xea, 0x33, 0x8a, 0x57, 0x19, 0xcb, 0x9f, 0x8a, 0xb5, 0xe7,
	0x87, 0xf6, 0xdb, 0x40, 0xf9, 0x27, 0xd8, 0x3e, 0x98, 0xa4, 0x6e, 0x7e, 0xd7, 0x4e, 0x3c, 0x65,
	0x2c, 0x8f, 0x8a, 0xb4, 0x9a, 0x6c, 0x7b, 0x8f, 0x79, 0x06, 0x8b, 0x3f, 0x17, 0xeb, 0xb0, 0xb4,
	0xbd, 0x43, 0x23, 0xa2, 0x8c, 0xe5, 0x71, 0xf1, 0x88, 0xf8, 0x17, 0xd8, 0xd1, 0xdd, 0x89, 0x49,
	0x7d, 0x41, 0x7d, 0x15, 0xcf, 0x74, 0x9b, 0x7b, 0xed, 0xd7, 0x28, 0xed, 0xbd, 0xe2, 0x7f, 0x83,
	0xad, 0x6f, 0x8d, 0xd5, 0x28, 0x66, 0x19, 0xcb, 0x59, 0x31, 0x8e, 0xfc, 0x2d, 0xc0, 0xe9, 0xee,
	0xb0, 0x97, 0xad, 0xb2, 0x46, 0xcc, 0xa9, 0x52, 0x42, 0xe4, 0xa7, 0xb2, 0x86, 0x7f, 0x84, 0x74,
	0x94, 0xef, 0xb2, 0x43, 0x7d, 0x33, 0x22, 0x26, 0xcf, 0x6a, 0xf0, 0xdc, 0x0b, 0x0f, 0x39, 0x87,
	0xa8, 0xc7, 0xda, 0x89, 0x84, 0xd2, 0xe9, 0xcd, 0x77, 0xf0, 0x1c, 0x36, 0x80, 0x60, 0x18, 0xbc,
	0xb3, 0x6b, 0x4a, 0x14, 0x0b, 0xfa, 0x2f, 0xe9, 0xcd, 0xdf, 0x40, 0xd2, 0xdb, 0x73, 0x8d, 0x46,
	0x56, 0xad, 0x58, 0x92, 0x10, 0x07, 0x70, 0x68, 0xbd, 0x68, 0xf0, 0x66, 0x35, 0x4a, 0x6b, 0xc4,
	0x2a, 0x88, 0x01, 0x7c, 0x37, 0x2f, 0xf5, 0xe9, 0xfa, 0xfa, 0xa1, 0xfe, 0xd1, 0x57, 0x78, 0x07,
	0x8b, 0x20, 0x87, 0x22, 0x29, 0xe9, 0x61, 0x23, 0xf4, 0xf6, 0x86, 0xb2, 0xd1, 0xd7, 0x21, 0x60,
	0x33, 0x18, 0x08, 0x51, 0xc2, 0x7b, 0x58, 0x0e, 0x86, 0x10, 0xb1, 0x25, 0xc7, 0xb0, 0x14, 0x32,
	0x5e, 0x43, 0x5c, 0xa1, 0x53, 0x46, 0x39, 0x25, 0x78, 0xc6, 0xf2, 0x65, 0x31, 0xcd, 0xa7, 0x19,
	0x7d, 0x5b, 0x5f, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x66, 0xf2, 0xb0, 0x94, 0x6e, 0x02, 0x00,
	0x00,
}
